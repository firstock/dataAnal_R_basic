# data_clean <- gsub("\\d+", "", data_vector)
# w_ignore에 regex 넣을 땐 \d+ 로 넣어야 한다
ignore_path <- "data2nd/w_ignore_manner.txt"
gsub_txt <- function(ignore_path, data){
txt <- readLines(ignore_path) #엔터, 맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub((txt[i]), "", data)
}
return(data)
}
data <- gsub_txt(ignore_path, data)
head(data)
gsub_txt <- function(ignore_path, data){
txt <- readLines(ignore_path) #엔터, 맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub((txt[i]), "", data)
}
return(data)
}
data <- gsub_txt(ignore_path, data)
head(data)
## 파일 읽기
data <- readLines("data2nd/teraMmanner_180219_some_ANSI.txt")
# data <- readLines("data2nd/seoul_new.txt")
head(data)
tail(data)
## 출력제외 내용 걸러내기
#gsub 반환값도 vector. http://lightblog.tistory.com/27
# data_clean <- gsub("\\d+", "", data_vector)
# w_ignore에 regex 넣을 땐 \d+ 로 넣어야 한다
ignore_path <- "data2nd/w_ignore_manner.txt"
gsub_txt <- function(ignore_path, data){
txt <- readLines(ignore_path) #엔터, 맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub((txt[i]), "", data)
}
return(data)
}
data <- gsub_txt(ignore_path, data)
head(data)
tail(data)
gsub_txt <- function(ignore_path, data){
txt <- readLines(ignore_path) #엔터, 맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub((txt[i]), "", data)
}
return(data)
}
data <- gsub_txt(ignore_path, data)
head(data)
## 파일 읽기
data <- readLines("data2nd/teraMmanner_180219_some_ANSI.txt")
# data <- readLines("data2nd/seoul_new.txt")
head(data)
tail(data)
data <- gsub_txt(ignore_path, data)
head(data)
tail(data)
## 파일 읽기
data <- readLines("data2nd/teraMmanner_180219_some_ANSI.txt")
# data <- readLines("data2nd/seoul_new.txt")
head(data)
tail(data)
## 출력제외 내용 걸러내기
#gsub 반환값도 vector. http://lightblog.tistory.com/27
# data_clean <- gsub("\\d+", "", data_vector)
# w_ignore에 regex 넣을 땐 \d+ 로 넣어야 한다
ignore_path <- "data2nd/w_ignore_manner.txt"
gsub_txt <- function(ignore_path, data){
txt <- readLines(ignore_path) #엔터, 맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub((txt[i]), "", data)
}
return(data)
}
data <- gsub_txt(ignore_path, data)
head(data)
head(data_vector, 30)
data_vector <- Filter(function(x) {nchar(x)>= 2}, data_vector)
## 출력제외 내용 걸러내기
data_clean <- gsub_txt(ignore_path, data_vector)
## 출력제외 내용 걸러내기
data_clean <- gsub_txt(ignore_path, data_vector)
## 출력제외 내용 걸러내기
data_clean <- gsub_txt(ignore_path, data_vector)
## 출력제외 내용 걸러내기
data_clean <- gsub_txt(ignore_path, data_vector)
## 출력제외 내용 걸러내기
data_clean <- gsub_txt(ignore_path, data_vector)
## 출력제외 내용 걸러내기
data_clean <- gsub_txt(ignore_path, data_vector)
## 출력제외 내용 걸러내기
data_clean <- gsub_txt(ignore_path, data_vector)
## 출력제외 내용 걸러내기
#gsub 반환값도 vector. http://lightblog.tistory.com/27
# data_clean <- gsub("\\d+", "", data_vector)
# w_ignore에 regex 넣을 땐 \d+ 로 넣어야 한다
ignore_path <- "data2nd/w_ignore_manner.txt"
gsub_txt <- function(ignore_path, data){
txt <- readLines(ignore_path) #엔터, 맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub((txt[i]), "", data)
}
return(data)
}
data <- gsub_txt(ignore_path, data)
gsub_txt <- function(ignore_path, data){
txt <- readLines(ignore_path) #엔터, 맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub((txt[i]), "", data)
}
return(data)
}
data <- gsub_txt(ignore_path, data)
??gsub
gsub_txt <- function(ignore_path, data){
txt <- readLines(ignore_path) #엔터, 맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub((txt[i]), "", data, perl= T)
}
return(data)
}
data <- gsub_txt(ignore_path, data)
head(data)
tail(data)
for(i in 1:cnt_txt){
data <- gsub((txt[i]), "", data, perl= T)
}
gsub_txt <- function(ignore_path, data){
txt <- readLines(ignore_path) #엔터, 맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub((txt[i]), "", data, perl= T)
}
return(data)
}
data <- gsub_txt(ignore_path, data)
head(data)
tail(data)
# data <- readLines("data2nd/seoul_new.txt")
head(data)
tail(data)
## 파일 읽기
data <- readLines("data2nd/teraMmanner_180219_some_ANSI.txt")
tail(data)
gsub_txt <- function(ignore_path, data){
txt <- readLines(ignore_path) #엔터, 맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub((txt[i]), "", data, perl= T)
}
return(data)
}
data <- gsub_txt(ignore_path, data)
tail(data)
## 파일 읽기
data <- readLines("data2nd/teraMmanner_180219_some_ANSI.txt")
tail(data)
## 출력제외 내용 걸러내기
#gsub 반환값도 vector. http://lightblog.tistory.com/27
# data_clean <- gsub("\\d+", "", data_vector)
# w_ignore에 regex 넣을 땐 \d+ 로 넣어야 한다
ignore_path <- "data2nd/w_ignore_manner.txt"
# ??gsub
gsub_txt <- function(ignore_path, data){
txt <- readLines(ignore_path) #엔터, 맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub((txt[i]), "", data, perl= T)
}
return(data)
}
data <- gsub_txt(ignore_path, data)
head(data)
tail(data)
## 파일 읽기
data <- readLines("data2nd/teraMmanner_180219_some_ANSI.txt")
# data <- readLines("data2nd/seoul_new.txt")
head(data)
tail(data)
# data <- readLines("data2nd/seoul_new.txt")
head(data)
# ??gsub
gsub_txt <- function(ignore_path, data){
txt <- readLines(ignore_path) #엔터, 맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub((txt[i]), "", data, perl= T)
}
return(data)
}
head(data)
tail(data)
data <- gsub_txt(ignore_path, data)
head(data)
tail(data)
## 파일 읽기
data <- readLines("data2nd/teraMmanner_180219_some_ANSI.txt")
# data <- readLines("data2nd/seoul_new.txt")
head(data)
tail(data)
## 출력제외 내용 걸러내기
#gsub 반환값도 vector. http://lightblog.tistory.com/27
# data_clean <- gsub("\\d+", "", data_vector)
# w_ignore에 regex 넣을 땐 \d+ 로 넣어야 한다
ignore_path <- "data2nd/w_ignore_manner.txt"
# ??gsub
#gsub > option: perl=T 해야 look ahead 사용가능
gsub_txt <- function(ignore_path, data){
txt <- readLines(ignore_path) #엔터, 맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub((txt[i]), "", data, perl= T)
}
return(data)
}
data <- gsub_txt(ignore_path, data)
head(data)
## 파일 읽기
data <- readLines("data2nd/teraMmanner_180219_some_ANSI.txt")
# data <- readLines("data2nd/seoul_new.txt")
head(data)
tail(data)
# 아니면 중복제거로만 따로 함수를 만들까
rmDuplicate_txt <- function(rmDupli_path, data){
txt <- readLines(rmDupli_path) #맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub((txt[i]), "$1", data, perl= T)
}
return(data)
}
data <- rmDuplicate_txt(rmDupli_path, data)
rmDupli_path <- "data2nd/w_rm_duplicate.txt"
data <- rmDuplicate_txt(rmDupli_path, data)
# 아니면 중복제거로만 따로 함수를 만들까
rmDuplicate_txt <- function(rmDupli_path, data){
txt <- readLines(rmDupli_path) #맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub((txt[i]), "$1", data, perl= T)
}
return(data)
}
data <- rmDuplicate_txt(rmDupli_path, data)
head(data)
# 아니면 중복제거로만 따로 함수를 만들까
rmDuplicate_txt <- function(rmDupli_path, data){
txt <- readLines(rmDupli_path) #맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub((txt[i]), "\\1", data, perl= T)
}
return(data)
}
data <- rmDuplicate_txt(rmDupli_path, data)
head(data)
# 아니면 중복제거로만 따로 함수를 만들까
rmDuplicate_txt <- function(rmDupli_path, data){
txt <- readLines(rmDupli_path) #맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub((txt[i]), "\\1", data, perl= T)
}
return(data)
}
data <- rmDuplicate_txt(rmDupli_path, data)
head(data)
# 아니면 중복제거로만 따로 함수를 만들까
rmDuplicate_txt <- function(rmDupli_path, data){
txt <- readLines(rmDupli_path) #맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub((txt[i]), "\1", data, perl= T)
}
return(data)
}
data <- rmDuplicate_txt(rmDupli_path, data)
head(data)
## 파일 읽기
data <- readLines("data2nd/teraMmanner_180219_some_ANSI.txt")
# data <- readLines("data2nd/seoul_new.txt")
head(data)
tail(data)
data <- rmDuplicate_txt(rmDupli_path, data)
head(data)
## 파일 읽기
data <- readLines("data2nd/teraMmanner_180219_some_ANSI.txt")
# data <- readLines("data2nd/seoul_new.txt")
head(data)
tail(data)
# 아니면 중복제거로만 따로 함수를 만들까
rmDuplicate_txt <- function(rmDupli_path, data){
txt <- readLines(rmDupli_path) #맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub((txt[i]), "\1", data, perl= T)
}
return(data)
}
data <- rmDuplicate_txt(rmDupli_path, data)
head(data)
## 파일 읽기
data <- readLines("data2nd/teraMmanner_180219_some_ANSI.txt")
# data <- readLines("data2nd/seoul_new.txt")
head(data)
tail(data)
# 아니면 중복제거로만 따로 함수를 만들까
rmDuplicate_txt <- function(rmDupli_path, data){
txt <- readLines(rmDupli_path) #맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub(txt[i], "\1", data, perl= T)
}
return(data)
}
data <- rmDuplicate_txt(rmDupli_path, data)
head(data)
## 파일 읽기
data <- readLines("data2nd/teraMmanner_180219_some_ANSI.txt")
# data <- readLines("data2nd/seoul_new.txt")
head(data)
tail(data)
rmDupli_path <- "data2nd/w_rm_duplicate.txt"
# 아니면 중복제거로만 따로 함수를 만들까
rmDuplicate_txt <- function(rmDupli_path, data){
txt <- readLines(rmDupli_path) #맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub(txt[i], "$1", data, perl= T)
}
return(data)
}
head(data)
data <- rmDuplicate_txt(rmDupli_path, data)
head(data)
tail(data)
# 아니면 중복제거로만 따로 함수를 만들까
rmDuplicate_txt <- function(rmDupli_path, data){
txt <- readLines(rmDupli_path) #맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub(txt[i], "$1", data, perl= T)
print(txt[i])
}
return(data)
}
## 파일 읽기
data <- readLines("data2nd/teraMmanner_180219_some_ANSI.txt")
# data <- readLines("data2nd/seoul_new.txt")
head(data)
tail(data)
# 아니면 중복제거로만 따로 함수를 만들까
rmDuplicate_txt <- function(rmDupli_path, data){
txt <- readLines(rmDupli_path) #맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub(txt[i], "$1", data, perl= T)
print(txt[i])
}
return(data)
}
data <- rmDuplicate_txt(rmDupli_path, data)
## 파일 읽기
data <- readLines("data2nd/teraMmanner_180219_some_ANSI.txt")
# data <- readLines("data2nd/seoul_new.txt")
head(data)
tail(data)
# 아니면 중복제거로만 따로 함수를 만들까
rmDuplicate_txt <- function(rmDupli_path, data){
txt <- readLines(rmDupli_path) #맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub(txt[i], "\1", data, perl= T)
#print(txt[i])
}
return(data)
}
data <- rmDuplicate_txt(rmDupli_path, data)
head(data)
## 파일 읽기
data <- readLines("data2nd/teraMmanner_180219_some_ANSI.txt")
# data <- readLines("data2nd/seoul_new.txt")
head(data)
tail(data)
rmDupli_path <- "data2nd/w_rm_duplicate.txt"
# 아니면 중복제거로만 따로 함수를 만들까
rmDuplicate_txt <- function(rmDupli_path, data){
txt <- readLines(rmDupli_path) #맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub(txt[i], "\1", data, perl= T, fixed= F)
#print(txt[i])
}
return(data)
}
data <- rmDuplicate_txt(rmDupli_path, data)
head(data)
tail(data)
## 파일 읽기
data <- readLines("data2nd/teraMmanner_180219_some_ANSI.txt")
# data <- readLines("data2nd/seoul_new.txt")
head(data)
tail(data)
# 아니면 중복제거로만 따로 함수를 만들까
rmDuplicate_txt <- function(rmDupli_path, data){
txt <- readLines(rmDupli_path) #맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub(txt[i], '\\1', data, perl= T, fixed= F)
#print(txt[i])
}
return(data)
}
data <- rmDuplicate_txt(rmDupli_path, data)
head(data)
tail(data)
## 파일 읽기
data <- readLines("data2nd/teraMmanner_180219_some_ANSI.txt")
# data <- readLines("data2nd/seoul_new.txt")
head(data)
tail(data)
# 아니면 중복제거로만 따로 함수를 만들까
rmDuplicate_txt <- function(rmDupli_path, data){
txt <- readLines(rmDupli_path) #맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub(txt[i], '\\1', data, perl= T)
# data <- gsub(txt[i], '\\1', data, perl= T, fixed= F)
#print(txt[i])
}
return(data)
}
data <- rmDuplicate_txt(rmDupli_path, data)
head(data)
tail(data)
## 출력제외 내용 걸러내기
#gsub 반환값도 vector. http://lightblog.tistory.com/27
# data_clean <- gsub("\\d+", "", data_vector)
# w_ignore에 regex 넣을 땐 \d+ 로 넣어야 한다
ignore_path <- "data2nd/w_ignore_manner.txt"
# ??gsub
#gsub > option: perl=T 해야 look ahead 사용가능
gsub_txt <- function(ignore_path, data){
txt <- readLines(ignore_path) #맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub((txt[i]), "", data, perl= T)
}
return(data)
}
data <- gsub_txt(ignore_path, data)
head(data)
## 파일 읽기
data <- readLines("data2nd/teraMmanner_180219_some_ANSI.txt")
# data <- readLines("data2nd/seoul_new.txt")
head(data)
tail(data)
## 출력제외 내용 걸러내기
#gsub 반환값도 vector. http://lightblog.tistory.com/27
# data_clean <- gsub("\\d+", "", data_vector)
# w_ignore에 regex 넣을 땐 \d+ 로 넣어야 한다
ignore_path <- "data2nd/w_ignore_manner.txt"
rmDupli_path <- "data2nd/w_rm_duplicate.txt"
# ??gsub
#gsub > option: perl=T 해야 look ahead 사용가능
gsub_txt <- function(ignore_path, data){
txt <- readLines(ignore_path) #맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub((txt[i]), "", data, perl= T)
}
return(data)
}
# 아니면 중복제거로만 따로 함수를 만들까
rmDuplicate_txt <- function(rmDupli_path, data){
txt <- readLines(rmDupli_path) #맨 마지막 엔터 꼭
cnt_txt <- length(txt)
for(i in 1:cnt_txt){
data <- gsub(txt[i], '\\1', data, perl= T)
#print(txt[i])
}
return(data)
}
data <- rmDuplicate_txt(rmDupli_path, data)
head(data)
tail(data)
data <- gsub_txt(ignore_path, data)
head(data)
tail(data)
## 명사만 추출
# USE.NAMES= F: 각 명사 칼럼에 대한 이름을 보고 싶지X
# 1.5MB 1분 이내
data_noun <- sapply(data, extractNoun, USE.NAMES= F)
library(stringr)
library(googleVis)
str_dup(fruits, 3)
fruits
fruit
str_dup(fruit, 3)
fruits <- head(fruit,30)
str_dup(fruits, 3)
fruits <- head(fruit,30)；　fruits
fruits <- head(fruit,30)ｄｆ　fruits
